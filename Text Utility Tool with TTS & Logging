<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Utility Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Light gray background */
        }
        textarea {
            min-height: 150px;
            resize: vertical;
        }
        .log-container {
            max-height: 300px;
            overflow-y: auto;
            white-space: pre-wrap; /* Preserve whitespace and newlines */
            word-wrap: break-word; /* Break long words */
        }
        /* Custom scrollbar for log (optional) */
        .log-container::-webkit-scrollbar {
            width: 8px;
        }
        .log-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        .log-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }
        .log-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
        .button-group button {
            margin: 0.25rem;
        }
    </style>
</head>
<body class="antialiased text-slate-700">

    <div class="container mx-auto p-4 md:p-8 max-w-4xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold text-slate-800">Text Utility Pro</h1>
            <p class="text-slate-600">Convert, analyze, and listen to your text with ease.</p>
        </header>

        <!-- Input Area -->
        <section class="mb-6">
            <label for="inputText" class="block text-sm font-medium text-slate-700 mb-1">Enter Text Here:</label>
            <textarea id="inputText" class="w-full p-3 border border-slate-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Type or paste your text..."></textarea>
            <div class="flex justify-between items-center mt-2 text-sm text-slate-500">
                <span id="charCount">Characters: 0</span>
                <span id="wordCount">Words: 0</span>
            </div>
        </section>

        <!-- Conversion Buttons -->
        <section class="mb-6 p-4 bg-white rounded-lg shadow">
            <h2 class="text-xl font-semibold mb-3 text-slate-700">Case Conversions</h2>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2 button-group">
                <button onclick="convertToUppercase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">UPPER CASE</button>
                <button onclick="convertToLowercase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">lower case</button>
                <button onclick="convertToSentenceCase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Sentence case</button>
                <button onclick="convertToTitleCase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Title Case</button>
                <button onclick="convertToAlternatingCase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">AlTeRnAtInG CaSe</button>
                <button onclick="convertToInverseCase()" class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">iNVERSE cASE</button>
                <button onclick="clearText()" class="bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Clear All</button>
                <button onclick="copyOutput()" class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Copy Output</button>
            </div>
        </section>

        <!-- Output Area -->
        <section class="mb-6">
            <label for="outputText" class="block text-sm font-medium text-slate-700 mb-1">Converted Text:</label>
            <textarea id="outputText" class="w-full p-3 border border-slate-300 rounded-md shadow-sm bg-slate-50" readonly placeholder="Result will appear here..."></textarea>
        </section>

        <!-- Text-to-Speech Controls -->
        <section class="mb-6 p-4 bg-white rounded-lg shadow">
            <h2 class="text-xl font-semibold mb-3 text-slate-700">Text-to-Speech</h2>
            <div class="flex flex-wrap gap-2 button-group">
                <button id="warmUpTTSButton" onclick="warmUpTTS()" class="bg-indigo-500 hover:bg-indigo-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Warm Up Audio</button>
                <button id="speakButton" onclick="speakText()" class="bg-teal-500 hover:bg-teal-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Speak Text</button>
                <button id="stopSpeakButton" onclick="stopSpeech()" class="bg-amber-500 hover:bg-amber-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Stop Speaking</button>
            </div>
             <div class="mt-2">
                <label for="voiceSelect" class="text-sm font-medium text-slate-700 mr-2">Voice:</label>
                <select id="voiceSelect" class="p-2 border border-slate-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></select>
            </div>
        </section>

        <!-- Log Controls -->
        <section class="mb-6 p-4 bg-white rounded-lg shadow">
            <h2 class="text-xl font-semibold mb-3 text-slate-700">Developer Log</h2>
            <div class="button-group">
                <button onclick="toggleLogVisibility()" class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Show/Hide Log</button>
                <button onclick="copyLogToClipboard()" class="bg-gray-500 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded-md transition duration-150">Copy Log</button>
            </div>
            <div id="logOutputContainer" class="mt-4 p-3 border border-slate-300 rounded-md bg-slate-50 log-container hidden">
                <pre id="logOutput" class="text-xs"></pre>
            </div>
        </section>

        <!-- Notification Area -->
        <div id="notification" class="fixed bottom-5 right-5 bg-green-500 text-white py-2 px-4 rounded-lg shadow-md transition-opacity duration-500 opacity-0">
            Notification
        </div>

    </div>

    <script>
        const inputTextElem = document.getElementById('inputText');
        const outputTextElem = document.getElementById('outputText');
        const charCountElem = document.getElementById('charCount');
        const wordCountElem = document.getElementById('wordCount');
        const logOutputElem = document.getElementById('logOutput');
        const logOutputContainer = document.getElementById('logOutputContainer');
        const notificationElem = document.getElementById('notification');
        const voiceSelect = document.getElementById('voiceSelect');

        // --- Configuration ---
        const DEBUG_MODE = true; // Set to false to disable logging for production

        // --- Logging ---
        let interactionLog = [];

        function logInteraction(action, details = {}) {
            if (!DEBUG_MODE) return;
            const timestamp = new Date().toISOString();
            interactionLog.push({ timestamp, action, details });
            updateLogDisplay();
        }

        function updateLogDisplay() {
            if (!DEBUG_MODE) return;
            logOutputElem.textContent = JSON.stringify(interactionLog, null, 2);
        }

        function toggleLogVisibility() {
            logInteraction('toggleLogVisibility');
            logOutputContainer.classList.toggle('hidden');
        }

        function copyLogToClipboard() {
            logInteraction('copyLogToClipboard');
            if (interactionLog.length === 0) {
                showNotification("Log is empty.", "bg-yellow-500");
                return;
            }
            const logText = JSON.stringify(interactionLog, null, 2);
            navigator.clipboard.writeText(logText).then(() => {
                showNotification("Log copied to clipboard!");
            }).catch(err => {
                console.error('Failed to copy log: ', err);
                showNotification("Failed to copy log. Check console.", "bg-red-500");
            });
        }

        // --- Text Analysis ---
        function updateTextAnalysis() {
            const text = inputTextElem.value;
            charCountElem.textContent = `Characters: ${text.length}`;
            const words = text.trim().split(/\s+/).filter(word => word.length > 0);
            wordCountElem.textContent = `Words: ${words.length}`;
        }
        inputTextElem.addEventListener('input', updateTextAnalysis);

        // --- Case Conversion Functions ---
        function convertToUppercase() {
            logInteraction('convertToUppercase', { inputLength: inputTextElem.value.length });
            outputTextElem.value = inputTextElem.value.toUpperCase();
        }

        function convertToLowercase() {
            logInteraction('convertToLowercase', { inputLength: inputTextElem.value.length });
            outputTextElem.value = inputTextElem.value.toLowerCase();
        }

        function convertToSentenceCase() {
            logInteraction('convertToSentenceCase', { inputLength: inputTextElem.value.length });
            const text = inputTextElem.value.toLowerCase();
            outputTextElem.value = text.replace(/(^\s*\w|[.!?]\s*\w)/g, c => c.toUpperCase());
        }

        function convertToTitleCase() {
            logInteraction('convertToTitleCase', { inputLength: inputTextElem.value.length });
            outputTextElem.value = inputTextElem.value.toLowerCase().split(' ').map(word => {
                return word.charAt(0).toUpperCase() + word.slice(1);
            }).join(' ');
        }

        function convertToAlternatingCase() {
            logInteraction('convertToAlternatingCase', { inputLength: inputTextElem.value.length });
            let result = "";
            for (let i = 0; i < inputTextElem.value.length; i++) {
                result += i % 2 === 0 ? inputTextElem.value[i].toLowerCase() : inputTextElem.value[i].toUpperCase();
            }
            outputTextElem.value = result;
        }

        function convertToInverseCase() {
            logInteraction('convertToInverseCase', { inputLength: inputTextElem.value.length });
            let result = "";
            for (let i = 0; i < inputTextElem.value.length; i++) {
                const char = inputTextElem.value[i];
                result += char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();
            }
            outputTextElem.value = result;
        }

        function clearText() {
            logInteraction('clearText');
            inputTextElem.value = "";
            outputTextElem.value = "";
            updateTextAnalysis();
            showNotification("Text cleared!");
        }

        function copyOutput() {
            logInteraction('copyOutput', { outputLength: outputTextElem.value.length });
            if (outputTextElem.value === "") {
                showNotification("Nothing to copy.", "bg-yellow-500");
                return;
            }
            outputTextElem.select();
            try {
                const successful = document.execCommand('copy');
                if (successful) {
                    showNotification("Output copied to clipboard!");
                } else {
                    showNotification("Copying failed. Please copy manually.", "bg-red-500");
                }
            } catch (err) {
                console.error('Fallback: Oops, unable to copy', err);
                showNotification("Copying failed. Please copy manually.", "bg-red-500");
            }
            window.getSelection().removeAllRanges(); // Deselect
        }

        // --- Text-to-Speech Functionality ---
        let synth = window.speechSynthesis;
        let voices = [];

        function populateVoiceList() {
            voices = synth.getVoices().sort((a, b) => a.name.localeCompare(b.name));
            const selectedIndex = voiceSelect.selectedIndex < 0 ? 0 : voiceSelect.selectedIndex;
            voiceSelect.innerHTML = '';
            voices.forEach(voice => {
                const option = document.createElement('option');
                option.textContent = `${voice.name} (${voice.lang})`;
                if (voice.default) {
                    option.textContent += ' -- DEFAULT';
                }
                option.setAttribute('data-lang', voice.lang);
                option.setAttribute('data-name', voice.name);
                voiceSelect.appendChild(option);
            });
            voiceSelect.selectedIndex = selectedIndex;
        }

        populateVoiceList();
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = populateVoiceList;
        }

        function warmUpTTS() {
            logInteraction('warmUpTTS');
            if (!synth) {
                showNotification("Speech Synthesis not supported.", "bg-red-500");
                return;
            }
            // Speaking a short, silent utterance to "wake up" the engine.
            const utterance = new SpeechSynthesisUtterance(" ");
            utterance.volume = 0; // Make it silent
            synth.speak(utterance);
            showNotification("Audio engine warmed up!", "bg-green-500");
        }
        
        function speakText() {
            logInteraction('speakText', { textLength: outputTextElem.value.length });
            if (!synth) {
                showNotification("Speech Synthesis not supported.", "bg-red-500");
                return;
            }
            if (synth.speaking) {
                console.error('SpeechSynthesis.speaking');
                showNotification("Already speaking. Please stop first.", "bg-yellow-500");
                return;
            }
            if (outputTextElem.value.trim() !== '') {
                const utterThis = new SpeechSynthesisUtterance(outputTextElem.value);
                utterThis.onend = function (event) {
                    logInteraction('speakTextEnd', { elapsedTime: event.elapsedTime });
                }
                utterThis.onerror = function (event) {
                    console.error('SpeechSynthesisUtterance.onerror', event);
                    logInteraction('speakTextError', { error: event.error });
                    showNotification(`Error during speech: ${event.error}`, "bg-red-500");
                }
                const selectedOption = voiceSelect.selectedOptions[0].getAttribute('data-name');
                for (let i = 0; i < voices.length ; i++) {
                    if (voices[i].name === selectedOption) {
                        utterThis.voice = voices[i];
                        break;
                    }
                }
                // You can also set pitch and rate here if desired
                // utterThis.pitch = 1;
                // utterThis.rate = 1;
                synth.speak(utterThis);
                showNotification("Speaking...", "bg-blue-500");
            } else {
                showNotification("Nothing to speak. Output is empty.", "bg-yellow-500");
            }
        }

        function stopSpeech() {
            logInteraction('stopSpeech');
            if (synth.speaking) {
                synth.cancel();
                showNotification("Speech stopped.");
            }
        }
        
        // --- Notification System ---
        let notificationTimeout;
        function showNotification(message, bgColor = "bg-green-500") {
            notificationElem.textContent = message;
            notificationElem.className = `fixed bottom-5 right-5 text-white py-2 px-4 rounded-lg shadow-md transition-opacity duration-500 opacity-100 ${bgColor}`; // Apply new bg color
            
            clearTimeout(notificationTimeout);
            notificationTimeout = setTimeout(() => {
                notificationElem.classList.remove('opacity-100');
                notificationElem.classList.add('opacity-0');
            }, 3000);
        }

        // Initial setup
        updateTextAnalysis();
        logInteraction('pageLoaded');

    </script>
</body>
</html>
