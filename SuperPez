/**
 * @OnlyCurrentDoc
 * This script provides comprehensive automation for the SP tracking sheet.
 *
 * FEATURES:
 * 1.  Dynamic Row Coloring: Row background and font color change based on status in Column L.
 * 2.  Automatic Row Insertion: A new row is added at the top when data is entered into row 2.
 * 3.  28-Day Countdown: Automatically calculates 'Days Remaining' in Column D based on the 'APPROVAL DATE' in Column C.
 * 4.  Priority Flags: A daily script identifies and flags SPs needing a welcome call.
 * 5.  Data Cleanup: Automatically trims whitespace and standardizes cell formatting on every edit.
 * 6.  WC Timestamps: Automatically adds/removes a 'Welcome Call Date' in Column N when status changes to/from "WC done".
 * 7.  Quick Follow-Up Log: A custom menu item to quickly add a timestamped note to the selected SP.
 */

// --- CONFIGURATION ---
const AFFECTED_SHEETS = ["Sheet1"]; // <-- IMPORTANT: Change to your exact sheet name if different.

// Column Assignments (A=1, B=2, etc.)
const APPROVAL_DATE_COL = 3; // Column C
const DAYS_REMAINING_COL = 4; // Column D
const NOTES_COL = 10; // Column J
const STATUS_COL = 12; // Column L
const PRIORITY_COL = 13; // Column M
const WC_DATE_COL = 14; // Column N

// Row Insertion Settings
const TARGET_ROW_FOR_INSERTION = 2;
const NEW_ROW_DEFAULT_STATUS = "Not called";

/**
 * Runs when the spreadsheet is opened.
 * Sets up custom menus and applies initial formatting to the entire sheet.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();

  // Main Menu for new utilities
  ui.createMenu('Utilities')
    .addItem('Log Follow-Up Call', 'logFollowUpCall_')
    .addSeparator()
    .addItem('Manually Set Priority Flags', 'setPriorityFlags') // Allow manual run
    .addToUi();

  // Secondary Menu for formatting
  ui.createMenu('Formatting')
    .addItem('Apply Formatting to All Cells', 'applySheetWideFormatting_')
    .addToUi();

  // Apply formatting on open to ensure consistency
  applySheetWideFormatting_();
}

/**
 * The main function that runs automatically whenever a user edits the sheet.
 * This function acts as a controller, directing actions based on the edited cell.
 * @param {Object} e The event object from the onEdit trigger.
 */
function onEdit(e) {
  if (!e || !e.range) {
    console.error("onEdit event object is missing crucial data.");
    return;
  }

  const range = e.range;
  const sheet = range.getSheet();
  const sheetName = sheet.getName();

  // Exit if the edited sheet is not in our list of affected sheets.
  if (AFFECTED_SHEETS.indexOf(sheetName) === -1) {
    return;
  }

  const editedRow = range.getRow();
  const editedCol = range.getColumn();

  // --- Action 1: Universal Formatting & Cleanup on EVERY edit ---
  try {
    range
      .trimWhitespace() // Remove leading/trailing spaces
      .setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP)
      .setVerticalAlignment("middle")
      .setHorizontalAlignment("left");
  } catch (formatError) {
    console.error(`Could not apply universal formatting: ${formatError.message}`);
  }


  // --- Action 2: Automatic Row Insertion ---
  // If any cell in the target row is edited and made non-blank, insert a new row.
  if (editedRow === TARGET_ROW_FOR_INSERTION && range.getDisplayValue().trim() !== "") {
    insertNewRow_(sheet);
  }

  // --- Action 3: Conditional Logic based on Edited Column ---
  switch (editedCol) {
    case APPROVAL_DATE_COL:
      // If an approval date is added or changed, update the countdown formula.
      updateDaysRemaining_(sheet, editedRow);
      break;

    case STATUS_COL:
      // If the status is changed, apply row coloring AND update the WC timestamp.
      const statusValue = e.value || "";
      const oldValue = e.oldValue || "";
      applyRowFormatting_(sheet.getRange(editedRow, 1, 1, sheet.getMaxColumns()), statusValue);
      updateWelcomeCallTimestamp_(sheet, editedRow, statusValue, oldValue);
      break;
  }
}

/**
 * INSTRUCTIONS FOR AUTOMATIC PRIORITY FLAGS:
 * 1. In the Apps Script editor, click the "Triggers" icon (looks like a clock) on the left sidebar.
 * 2. Click "+ Add Trigger" in the bottom right.
 * 3. Choose function to run: setPriorityFlags
 * 4. Choose which deployment should run: Head
 * 5. Select event source: Time-driven
 * 6. Select type of time based trigger: Day timer
 * 7. Select time of day: e.g., "8am - 9am" (or whenever you start your day)
 * 8. Click "Save".
 * This will now run automatically every morning.
 */
function setPriorityFlags() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(AFFECTED_SHEETS[0]);
  if (!sheet) return;

  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Normalize to the start of the day

  // Start from row 2 to skip header
  for (let i = 1; i < values.length; i++) {
    const row = i + 1;
    const status = values[i][STATUS_COL - 1];
    const approvalDate = new Date(values[i][APPROVAL_DATE_COL - 1]);

    // Check if the date is valid
    if (status === "Not called" && approvalDate.valueOf()) {
      const threeDaysAgo = new Date(today);
      threeDaysAgo.setDate(today.getDate() - 3);

      if (approvalDate <= threeDaysAgo) {
        sheet.getRange(row, PRIORITY_COL).setValue("High Priority");
      } else {
        sheet.getRange(row, PRIORITY_COL).clearContent();
      }
    } else {
      // Clear flag if status is not "Not called" or date is invalid
      sheet.getRange(row, PRIORITY_COL).clearContent();
    }
  }
}

/**
 * Menu Function: Logs a follow-up call in the notes of the currently selected row.
 */
function logFollowUpCall_() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  if (AFFECTED_SHEETS.indexOf(sheet.getName()) === -1) {
    SpreadsheetApp.getUi().alert("This function is not available on this sheet.");
    return;
  }

  const cell = sheet.getActiveCell();
  const notesCell = sheet.getRange(cell.getRow(), NOTES_COL);
  const currentNotes = notesCell.getValue();
  const date = new Date().toLocaleDateString(); // e.g., "8/26/2025"

  const newNote = `${date} Follow-up call:`;

  // Prepend the new note to existing notes, separated by a new line.
  const updatedNotes = currentNotes ? `${newNote}\n${currentNotes}` : newNote;

  notesCell.setValue(updatedNotes);
}

// --- HELPER FUNCTIONS ---

/**
 * Inserts a new blank row at the top and sets its default status.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet The sheet object.
 */
function insertNewRow_(sheet) {
  try {
    sheet.insertRowBefore(TARGET_ROW_FOR_INSERTION);
    sheet.getRange(TARGET_ROW_FOR_INSERTION, STATUS_COL).setValue(NEW_ROW_DEFAULT_STATUS);
  } catch (e) {
    console.error(`Error inserting row: ${e.message}`);
  }
}

/**
 * Sets the formula in the 'Days Remaining' column for a specific row.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet The sheet object.
 * @param {number} row The row number that was edited.
 */
function updateDaysRemaining_(sheet, row) {
  const dateCell = sheet.getRange(row, APPROVAL_DATE_COL);
  const countdownCell = sheet.getRange(row, DAYS_REMAINING_COL);

  if (dateCell.isBlank()) {
    countdownCell.clearContent();
    return;
  }

  // Get the cell's address (e.g., "C3") for use in the formula
  const dateCellA1 = dateCell.getA1Notation();
  const formula = `=IF(ISBLANK(${dateCellA1}), "", MAX(0, 28 - (TODAY() - ${dateCellA1})))`;
  countdownCell.setFormula(formula);
}


/**
 * Adds or removes the Welcome Call timestamp based on the status change.
 * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet The sheet object.
 * @param {number} row The row number that was edited.
 * @param {string} newStatus The new value from the status dropdown.
 * @param {string} oldStatus The previous value from the status dropdown.
 */
function updateWelcomeCallTimestamp_(sheet, row, newStatus, oldStatus) {
  const wcDoneStatuses = ["SPP WC done", "PPL WC done", "Nas WC done"];
  const timestampCell = sheet.getRange(row, WC_DATE_COL);

  const isNowWcDone = wcDoneStatuses.includes(newStatus);
  const wasPreviouslyWcDone = wcDoneStatuses.includes(oldStatus);

  // If status changes TO a "WC done" status, add the timestamp.
  if (isNowWcDone && !wasPreviouslyWcDone) {
    timestampCell.setValue(new Date());
  }
  // If status changes FROM a "WC done" status to something else, clear the timestamp.
  else if (!isNowWcDone && wasPreviouslyWcDone) {
    timestampCell.clearContent();
  }
}

/**
 * Applies background and font color formatting to a row based on its status.
 * @param {GoogleAppsScript.Spreadsheet.Range} targetRow The entire row range to format.
 * @param {string} status The value from the status dropdown.
 */
function applyRowFormatting_(targetRow, status) {
  let backgroundColor;
  let fontColor;

  switch (status) {
    case "Not called":
      backgroundColor = "#c00000"; // Dark Red
      fontColor = "#ffffff"; // White
      break;
    case "SPP called":
      backgroundColor = "#ffc0cb"; // Light Pink
      fontColor = "#000000"; // Black
      break;
    case "SPP WC done":
      backgroundColor = "#ffffff"; // White
      fontColor = "#ff00ff"; // Hot Pink
      break;
    case "PPL Called":
      backgroundColor = "#add8e6"; // Light Blue
      fontColor = "#000000"; // Black
      break;
    case "PPL WC done":
      backgroundColor = "#ffffff"; // White
      fontColor = "#00008b"; // Dark Blue
      break;
    case "Nas called":
      backgroundColor = "#e6e6fa"; // Lavender
      fontColor = "#000000"; // Black
      break;
    case "Nas WC done":
      backgroundColor = "#ffffff"; // White
      fontColor = "#800080"; // Dark Purple
      break;
    default: // Reset to default if status is cleared or doesn't match
      backgroundColor = "#ffffff"; // White
      fontColor = "#000000"; // Black
      break;
  }

  try {
    targetRow.setBackground(backgroundColor).setFontColor(fontColor);
  } catch (e) {
    console.error(`Error applying row formatting: ${e.message}`);
  }
}

/**
 * Applies standard formatting (clipping, alignment) to all data cells in the sheet.
 * Called on open and can be triggered manually from the menu.
 */
function applySheetWideFormatting_() {
  const sheets = SpreadsheetApp.getActiveSpreadsheet().getSheets();
  sheets.forEach(sheet => {
    if (AFFECTED_SHEETS.indexOf(sheet.getName()) !== -1) {
      try {
        const dataRange = sheet.getDataRange();
        if (dataRange.getWidth() > 0 && dataRange.getHeight() > 0) {
          dataRange
            .setWrapStrategy(SpreadsheetApp.WrapStrategy.CLIP)
            .setVerticalAlignment("middle")
            .setHorizontalAlignment("left");
        }
      } catch (error) {
        console.error(`Error setting sheet-wide formatting for ${sheet.getName()}: ${error.message}`);
      }
    }
  });
}

