<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Fighters (v4)</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
        }
        body {
            background-color: #1a1a1a;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: 'Press Start 2P', cursive;
        }
        .game-container {
            position: relative;
            display: inline-block;
        }
        canvas {
            display: block;
            image-rendering: pixelated;
            image-rendering: -moz-crisp-edges;
            image-rendering: crisp-edges;
        }
        #gameOverlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            pointer-events: none;
        }
        .ui-container {
            width: 100%;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .health-bar-container {
            width: 40%;
            height: 30px;
            background-color: #444;
            border: 4px solid #222;
            border-radius: 5px;
            overflow: hidden;
            position: relative;
        }
        .health-bar {
            height: 100%;
            background: linear-gradient(to bottom, #7CFC00, #32CD32);
            width: 100%;
            transition: width 0.2s linear;
        }
        #player1-health-container {
            border-right: 2px solid #222;
        }
        #player2-health-container {
            border-left: 2px solid #222;
            transform: scaleX(-1);
        }
        #timer {
            width: 100px;
            height: 60px;
            background-color: #222;
            color: white;
            font-size: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 4px solid #444;
            border-radius: 5px;
        }
        #gameStatus {
            color: white;
            font-size: 48px;
            text-align: center;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-shadow: 4px 4px #000;
            display: none;
        }
        .button-container {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
        }
        .game-button {
            padding: 8px 16px;
            font-family: 'Press Start 2P', cursive;
            font-size: 10px;
            background-color: #333;
            color: #ddd;
            border: 2px solid #555;
            border-radius: 5px;
            cursor: pointer;
        }
        #logDisplay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.85);
            color: #00FF41; /* Matrix Green */
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            padding: 20px;
            overflow-y: scroll;
            white-space: pre-wrap;
            display: none; /* Hidden by default */
            z-index: 10;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <!-- UI Overlay -->
        <div id="gameOverlay">
            <div class="ui-container">
                <div id="player1-health-container" class="health-bar-container">
                    <div id="player1-health" class="health-bar"></div>
                </div>
                <div id="timer">&infin;</div>
                <div id="player2-health-container" class="health-bar-container">
                    <div id="player2-health" class="health-bar"></div>
                </div>
            </div>
            <div id="gameStatus">FIGHT!</div>
            <pre id="logDisplay"></pre>
        </div>
        <!-- Game Canvas -->
        <canvas id="gameCanvas"></canvas>
        <!-- Control Buttons -->
        <div class="button-container">
            <button id="newGameButton" class="game-button" onclick="resetGame()">New Game (N)</button>
            <button id="logButton" class="game-button" onclick="toggleLog()">Show Log (L)</button>
        </div>
    </div>

    <script>
        // --- Game Setup ---
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = 1024;
        canvas.height = 576;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        const gravity = 0.7;
        const groundLevel = canvas.height - 96;
        let gameLog = [];
        let isPaused = false;
        let animationId;

        // --- Logging ---
        function logEvent(action, details = {}) {
            const timestamp = new Date().toLocaleTimeString();
            gameLog.push({ timestamp, action, details });
            if (gameLog.length > 100) { gameLog.shift(); }
        }

        function toggleLog() {
            isPaused = !isPaused;
            const logDisplay = document.getElementById('logDisplay');
            const logButton = document.getElementById('logButton');
            if (isPaused) {
                logEvent('Game Paused - Log Viewed');
                logDisplay.textContent = JSON.stringify(gameLog, null, 2);
                logDisplay.style.display = 'block';
                logButton.textContent = 'Hide Log & Resume';
                cancelAnimationFrame(animationId);
            } else {
                logEvent('Game Resumed');
                logDisplay.style.display = 'none';
                logButton.textContent = 'Show Log (L)';
                animate();
            }
        }
        
        // --- Game Reset ---
        function resetGame() {
            logEvent('New Game Started');
            player.position.x = 200;
            player.position.y = 100;
            player.velocity.x = 0;
            player.velocity.y = 0;
            player.health = 100;
            
            enemy.position.x = canvas.width - 250;
            enemy.position.y = 100;
            enemy.velocity.x = 0;
            enemy.velocity.y = 0;
            enemy.health = 100;

            document.querySelector('#player1-health').style.width = '100%';
            document.querySelector('#player2-health').style.width = '100%';
            document.querySelector('#gameStatus').style.display = 'none';

            if (isPaused) {
                isPaused = false;
                document.getElementById('logDisplay').style.display = 'none';
                document.getElementById('logButton').textContent = 'Show Log (L)';
            }
            // Ensure animation loop is running if it was stopped
            cancelAnimationFrame(animationId);
            animate();
        }

        // --- Player & Sprite Logic ---
        class Sprite {
            constructor({ position, velocity, color = 'red', offset = { x: 0, y: 0 }, facingDirection = 1 }) {
                this.position = position;
                this.velocity = velocity;
                this.width = 50;
                this.height = 150;
                this.lastKey;
                this.attackBox = {
                    position: { x: this.position.x, y: this.position.y },
                    offset,
                    width: this.width * 1.8, // Arm length is 1.8x body width
                    height: 20
                };
                this.color = color;
                this.isAttacking = false;
                this.health = 100;
                this.facingDirection = facingDirection; // 1 for right, -1 for left
            }

            draw() {
                // Main Body
                ctx.fillStyle = this.color;
                ctx.fillRect(this.position.x, this.position.y, this.width, this.height);

                // Head
                ctx.beginPath();
                ctx.arc(this.position.x + this.width / 2, this.position.y, this.width / 2, 0, Math.PI * 2);
                ctx.fillStyle = '#f0e68c'; // Khaki color for skin
                ctx.fill();

                // Legs
                ctx.fillStyle = '#444'; // Darker color for legs
                ctx.fillRect(this.position.x, this.position.y + this.height, this.width / 2 - 2, 20);
                ctx.fillRect(this.position.x + this.width / 2 + 2, this.position.y + this.height, this.width / 2 - 2, 20);

                // Arms
                ctx.fillStyle = '#555';
                if (this.isAttacking) {
                    const armLength = this.attackBox.width;
                    const armX = this.position.x + (this.facingDirection === 1 ? this.width : -armLength);
                    ctx.fillRect(armX, this.position.y + 40, armLength, this.attackBox.height);
                    
                    // Draw sweet spot (red tip)
                    const sweetSpotWidth = armLength * 0.04;
                    const sweetSpotX = this.facingDirection === 1 ? armX + armLength - sweetSpotWidth : armX;
                    ctx.fillStyle = 'red';
                    ctx.fillRect(sweetSpotX, this.position.y + 40, sweetSpotWidth, this.attackBox.height);

                    // Other arm
                    ctx.fillStyle = '#555';
                    ctx.fillRect(this.position.x, this.position.y + 70, this.width, 20);
                } else {
                    ctx.fillRect(this.position.x, this.position.y + 40, this.width, 20);
                }
            }

            update() {
                this.draw();
                // Update attackBox position based on facing direction
                this.attackBox.position.x = this.position.x + (this.facingDirection === 1 ? this.width : -this.attackBox.width);
                this.attackBox.position.y = this.position.y + this.attackBox.offset.y;

                this.position.x += this.velocity.x;
                this.position.y += this.velocity.y;

                if (this.position.y + this.height + this.velocity.y >= groundLevel) {
                    this.velocity.y = 0;
                    this.position.y = groundLevel - this.height;
                } else {
                    this.velocity.y += gravity;
                }
            }
            
            attack() {
                if(this.isAttacking) return;
                this.isAttacking = true;
                setTimeout(() => {
                    this.isAttacking = false;
                }, 200); // Attack duration
            }
        }

        // --- Character Creation ---
        const player = new Sprite({
            position: { x: 200, y: 100 },
            velocity: { x: 0, y: 0 },
            color: 'white',
            offset: { x: 0, y: 40 },
            facingDirection: 1
        });

        const enemy = new Sprite({
            position: { x: canvas.width - 250, y: 100 },
            velocity: { x: 0, y: 0 },
            color: 'red',
            offset: { x: 0, y: 40 },
            facingDirection: -1
        });

        // --- Keyboard Input ---
        const keys = {
            a: { pressed: false }, d: { pressed: false }, w: { pressed: false },
            ArrowRight: { pressed: false }, ArrowLeft: { pressed: false }, ArrowUp: { pressed: false }
        };

        // --- Game Logic ---
        function getIntersection(attacker, defender) {
            const r1 = attacker.attackBox;
            const r2 = {
                position: defender.position,
                width: defender.width,
                height: defender.height
            };
            
            const x1 = Math.max(r1.position.x, r2.position.x);
            const y1 = Math.max(r1.position.y, r2.position.y);
            const x2 = Math.min(r1.position.x + r1.width, r2.position.x + r2.width);
            const y2 = Math.min(r1.position.y + r1.height, r2.position.y + r2.height);

            if (x1 < x2 && y1 < y2) {
                return { x: x1, y: y1, width: x2 - x1, height: y2 - y1 };
            }
            return null; // No intersection
        }
        
        function calculateDamage(attacker, defender) {
            const intersection = getIntersection(attacker, defender);
            if (!intersection) return 0;

            const maxDamage = 5; // Base damage reduced by 50%
            const minDamage = 1; // Minimum damage for a close-range hit
            const sweetSpotPercentage = 0.04;

            const overlapWidth = intersection.width;
            const totalArmWidth = attacker.attackBox.width;
            
            const overlapRatio = overlapWidth / totalArmWidth;

            let damageMultiplier;
            if (overlapRatio <= sweetSpotPercentage) {
                // Hit with just the tip (sweet spot)
                damageMultiplier = 1.0; // 100% of max damage
            } else {
                // As more of the arm hits, damage decreases.
                // Calculate how far into the "sour spot" the hit is.
                const sourSpotRatio = (overlapRatio - sweetSpotPercentage) / (1 - sweetSpotPercentage);
                damageMultiplier = 1.0 - sourSpotRatio;
            }

            const calculatedDamage = minDamage + (maxDamage - minDamage) * damageMultiplier;
            
            logEvent('Damage Calculation', {
                attacker: attacker.color,
                overlapWidth: overlapWidth.toFixed(2),
                overlapRatio: overlapRatio.toFixed(2),
                damageMultiplier: damageMultiplier.toFixed(2),
                finalDamage: calculatedDamage.toFixed(2)
            });

            return Math.max(minDamage, calculatedDamage); // Ensure at least min damage on hit
        }


        function determineWinner({ player, enemy }) {
            isPaused = true;
            cancelAnimationFrame(animationId);
            document.querySelector('#gameStatus').style.display = 'flex';
            let winner;
            if (player.health <= 0 && enemy.health <= 0) {
                 document.querySelector('#gameStatus').innerHTML = 'Double KO';
                 winner = 'Tie';
            } else if (player.health > enemy.health) {
                document.querySelector('#gameStatus').innerHTML = 'Player 1 Wins';
                winner = 'Player 1';
            } else {
                document.querySelector('#gameStatus').innerHTML = 'Player 2 Wins';
                winner = 'Player 2';
            }
            logEvent('Game Over', { winner: winner, p1Health: player.health, p2Health: enemy.health });
        }

        // --- Animation Loop ---
        function animate() {
            animationId = window.requestAnimationFrame(animate);
            if (isPaused) return;

            ctx.fillStyle = 'black';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#4a5568';
            ctx.fillRect(0, groundLevel, canvas.width, canvas.height - groundLevel);

            player.update();
            enemy.update();

            player.velocity.x = 0;
            enemy.velocity.x = 0;

            if (keys.a.pressed && player.lastKey === 'a') {
                player.velocity.x = -5;
                player.facingDirection = -1;
            } else if (keys.d.pressed && player.lastKey === 'd') {
                player.velocity.x = 5;
                player.facingDirection = 1;
            }

            if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {
                enemy.velocity.x = -5;
                enemy.facingDirection = -1;
            } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {
                enemy.velocity.x = 5;
                enemy.facingDirection = 1;
            }

            // Collision detection & attack logic
            if (player.isAttacking) {
                const intersection = getIntersection(player, enemy);
                if (intersection) {
                    const damage = calculateDamage(player, enemy);
                    enemy.health -= damage;
                    document.querySelector('#player2-health').style.width = Math.max(0, enemy.health) + '%';
                    player.isAttacking = false; // Prevent multiple hits from one attack
                }
            }

            if (enemy.isAttacking) {
                const intersection = getIntersection(enemy, player);
                if (intersection) {
                    const damage = calculateDamage(enemy, player);
                    player.health -= damage;
                    document.querySelector('#player1-health').style.width = Math.max(0, player.health) + '%';
                    enemy.isAttacking = false;
                }
            }

            if (enemy.health <= 0 || player.health <= 0) {
                determineWinner({ player, enemy });
            }
        }

        // --- Event Listeners ---
        window.addEventListener('keydown', (event) => {
            logEvent('Key Down', { key: event.key, code: event.code }); // Log all key presses

            if (event.key.toLowerCase() === 'l') {
                toggleLog();
                return;
            }
            if (event.key === 'End' || event.key.toLowerCase() === 'n') {
                resetGame();
                return;
            }

            if (isPaused) return;

            switch (event.key) {
                case 'd': keys.d.pressed = true; player.lastKey = 'd'; break;
                case 'a': keys.a.pressed = true; player.lastKey = 'a'; break;
                case 'w': if (player.position.y + player.height >= groundLevel) player.velocity.y = -20; break;
                case ' ': player.attack(); break;

                case 'ArrowRight': keys.ArrowRight.pressed = true; enemy.lastKey = 'ArrowRight'; break;
                case 'ArrowLeft': keys.ArrowLeft.pressed = true; enemy.lastKey = 'ArrowLeft'; break;
                case 'ArrowUp': if (enemy.position.y + enemy.height >= groundLevel) enemy.velocity.y = -20; break;
                case 'ArrowDown': enemy.attack(); break;
            }
        });

        window.addEventListener('keyup', (event) => {
            switch (event.key) {
                case 'd': keys.d.pressed = false; break;
                case 'a': keys.a.pressed = false; break;
                case 'ArrowRight': keys.ArrowRight.pressed = false; break;
                case 'ArrowLeft': keys.ArrowLeft.pressed = false; break;
            }
        });

        // --- Start Game ---
        function initGame() {
            logEvent('Game Initialized');
            const gameStatusElem = document.querySelector('#gameStatus');
            gameStatusElem.innerHTML = 'FIGHT!';
            gameStatusElem.style.display = 'flex';
            setTimeout(() => {
                gameStatusElem.style.display = 'none';
            }, 1500);
            animate();
        }

        initGame();
    </script>
</body>
</html>
